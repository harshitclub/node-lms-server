generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COMPANY
  EMPLOYEE
  INDIVIDUAL
}

enum AccountType {
  ADMIN
  COMPANY
  EMPLOYEE
  INDIVIDUAL
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Departments {
  Administrative
  HR
  Operations_Delivery
  Product_Service_Development
  Purchasing
  Sales
  Marketing
  Accounting
  Finance
  IT
  Legal
  Research_and_Development
  Customer_Service
  Training
  Quality_Assurance
  Manufacturing
  Engineering
  Logistics
  Facilities
  Security
  Project_Management
  Public_Relations_Communications
  Investor_Relations
  Compliance
}

enum PlanType {
  TRIAL // upto 2 employees
  BASIC // upto 50 employees
  STANDARD // upto 100 employees
  PREMIUM // upto 250 employees
  CUSTOM // accordingly
}

model Admin {
  id                  String      @id @default(uuid())
  fullName            String
  email               String      @unique
  phone               String?
  address             Json?
  password            String
  accountType         AccountType @default(ADMIN)
  role                Role        @default(ADMIN)
  status              Status      @default(ACTIVE)
  isVerified          Boolean     @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Company {
  id String @id @default(uuid())

  // company information
  fullName    String
  email       String  @unique
  companyId   String
  phone       String?
  username    String?
  industry    String?
  address     Json?
  socialLinks Json?
  companyLogo String?
  description String?
  website     String?

  // account information
  password            String
  accountType         AccountType @default(COMPANY)
  role                Role        @default(COMPANY)
  status              Status      @default(ACTIVE)
  isVerified          Boolean     @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // plan information
  plan         PlanType? @default(TRIAL)
  maxEmployees String?

  // Relationships
  employees       Employee[]      @relation("CompanyEmployees")
  courses         Course[]        @relation("CompanyCourses")
  contactPerson   CompanyContact? @relation("CompanyContactPerson") // Make optional
  contactPersonId String?         @unique // Add foreign key - Important and make it unique
}

model CompanyContact {
  id             String       @id @default(uuid())
  fullName       String
  email          String       @unique
  phone          String?
  department     Departments?
  empId          String?
  jobTitle       String?
  profilePicture String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  company   Company? @relation("CompanyContactPerson", fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?  @unique
}

model Employee {
  id                  String       @id @default(uuid())
  fullName            String
  empId               String?
  email               String       @unique
  department          Departments?
  dateOfBirth         DateTime?
  address             Json?
  gender              String?
  jobTitle            String?
  profilePicture      String?
  description         String?
  phone               String?
  socialLinks         Json?
  password            String
  accountType         AccountType  @default(EMPLOYEE)
  role                Role         @default(EMPLOYEE)
  status              Status       @default(ACTIVE)
  isVerified          Boolean      @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations

  company   Company? @relation("CompanyEmployees", fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
}

model Individual {
  id                  String       @id @default(uuid())
  fullName            String
  email               String       @unique
  phone               String?
  socialLinks         Json?
  department          Departments?
  dateOfBirth         DateTime?
  address             Json?
  jobTitle            String?
  company             String?
  institute           String?
  course              String?
  profilePicture      String?
  description         String?
  gender              String?
  password            String
  accountType         AccountType  @default(INDIVIDUAL)
  role                Role         @default(INDIVIDUAL)
  status              Status       @default(ACTIVE)
  isVerified          Boolean      @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}

model Course {
  id                 String   @id @default(uuid())
  title              String
  description        String?
  thumbnail          String?
  cover              String?
  category           String?
  language           String?
  duration           String?
  level              String? // e.g., "Beginner", "Intermediate", "Advanced"
  viewsCount         Int?     @default(0) // Number of views for the video
  likesCount         Int?     @default(0) // Number of likes for the video
  dislikesCount      Int?     @default(0) // Number of dislikes for the video
  tags               String[] // Array of tags for searching/filtering
  prerequisites      String? // Prerequisites for the course (text description)
  whatYouWillLearn   String? // What students will learn (text description)
  whoIsThisCourseFor String? // Intended audience (text description)
  published          Boolean? @default(true) // Is the course published?

  company   Company @relation("CompanyCourses", fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  videos      Video[] // Relation to Video model (one-to-many)
  assessments Assessment[] // Relation to Assessment model (one-to-many)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Video {
  id              String      @id @default(uuid())
  title           String
  url             String
  duration        String?
  language        String?
  category        String?
  thumbnail       String?
  cover           String?
  chapter         Int?
  description     String?
  order           Int? // Add an order field for sorting videos within a chapter/course
  isPublished     Boolean?    @default(true) // Add a field to track if the video is published
  course          Course      @relation(fields: [courseId], references: [id], onDelete: Cascade) // Foreign key
  courseId        String
  videoAssessment Assessment? @relation("video_assessment") // One-to-one relation to video-specific assessment
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([courseId]) // Index for faster queries
}

model Assessment {
  id        String   @id @default(uuid())
  title     String // Title of the assessment
  questions Json[] // Store assessment questions as JSON (required)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade) // Foreign key
  courseId  String
  video     Video?   @relation("video_assessment", fields: [videoId], references: [id], onDelete: Cascade) // back relation from video to its assessment
  videoId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId]) // Index for faster queries
  @@index([videoId])
}
