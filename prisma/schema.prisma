generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  COMPANY
  EMPLOYEE
  INDIVIDUAL
}

enum AccountType {
  ADMIN
  COMPANY
  EMPLOYEE
  INDIVIDUAL
}

enum Status {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Departments {
  Administrative
  HR
  Operations_Delivery
  Product_Service_Development
  Purchasing
  Sales
  Marketing
  Accounting
  Finance
  IT
  Legal
  Research_and_Development
  Customer_Service
  Training
  Quality_Assurance
  Manufacturing
  Engineering
  Logistics
  Facilities
  Security
  Project_Management
  Public_Relations_Communications
  Investor_Relations
  Compliance
}

enum PlanType {
  TRIAL // upto 2 employees
  BASIC // upto 50 employees
  STANDARD // upto 100 employees
  PREMIUM // upto 250 employees
}

model Admin {
  id                  String      @id @default(uuid())
  fullName            String
  email               String      @unique
  phone               String?
  address             Json?
  password            String
  accountType         AccountType @default(ADMIN)
  role                Role        @default(ADMIN)
  status              Status      @default(ACTIVE)
  isVerified          Boolean     @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Company {
  id String @id @default(uuid())

  // company information
  fullName    String
  email       String  @unique
  companyId   String
  phone       String?
  username    String?
  industry    String?
  address     Json?
  socialLinks Json?
  companyLogo String? // URL or path to the company logo
  description String? // A brief description of the company
  website     String?

  // account information
  password            String
  accountType         AccountType @default(COMPANY)
  role                Role        @default(COMPANY)
  status              Status      @default(ACTIVE)
  isVerified          Boolean     @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  // plan information
  plan         PlanType @default(TRIAL)
  maxEmployees String?

  // Relationships
  employees       Employee[]      @relation("CompanyEmployees")
  contactPerson   CompanyContact? @relation("CompanyContactPerson") // Make optional
  contactPersonId String?         @unique // Add foreign key - Important and make it unique
}

model CompanyContact {
  id             String       @id @default(uuid())
  fullName       String
  email          String       @unique
  phone          String?
  department     Departments?
  empId          String?
  jobTitle       String?
  profilePicture String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  company   Company? @relation("CompanyContactPerson", fields: [companyId], references: [id], onDelete: SetNull)
  companyId String?  @unique
}

model Employee {
  id                  String       @id @default(uuid())
  fullName            String
  empId               String?      @unique // Employee ID (e.g., internal company ID)
  email               String       @unique
  department          Departments?
  dateOfBirth         DateTime? // Employee's date of birth
  address             Json? // Employee's address information (can be a JSON object)
  gender              String?
  jobTitle            String? // Employee's job title or position
  profilePicture      String? // URL or path to the employee's profile picture
  description         String? // A short biography or description of the employee
  phone               String?
  socialLinks         Json?
  password            String
  accountType         AccountType  @default(EMPLOYEE)
  role                Role         @default(EMPLOYEE)
  status              Status       @default(ACTIVE)
  isVerified          Boolean      @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations

  company   Company? @relation("CompanyEmployees", fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
}

model Individual {
  id                  String       @id @default(uuid())
  fullName            String
  email               String       @unique
  phone               String?
  socialLinks         Json?
  department          Departments?
  dateOfBirth         DateTime?
  address             Json?
  jobTitle            String?
  company             String?
  institute           String?
  course              String?
  profilePicture      String? // URL or path to the profile picture
  description         String? // A short biography or description
  gender              String? // Male, Female, Other, etc.
  password            String
  accountType         AccountType  @default(INDIVIDUAL)
  role                Role         @default(INDIVIDUAL)
  status              Status       @default(ACTIVE)
  isVerified          Boolean      @default(false)
  verificationToken   String?
  forgetPasswordToken String?
  lastLogin           DateTime?
  userAgent           String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
}
